/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InputTable.java
 *
 * Created on Mar 5, 2011, 9:43:15 PM
 */

package com.ggasoftware.indigo.chemdiff;

import com.ggasoftware.indigo.controls.RenderableMolData;
import com.ggasoftware.indigo.Indigo;
import com.ggasoftware.indigo.IndigoObject;
import com.ggasoftware.indigo.IndigoRenderer;
import com.ggasoftware.indigo.controls.GlobalParams;
import com.ggasoftware.indigo.controls.IndigoEventListener;
import com.ggasoftware.indigo.controls.IndigoEventSource;
import com.ggasoftware.indigo.controls.MolClicker;
import com.ggasoftware.indigo.controls.MolData;
import com.ggasoftware.indigo.controls.MolFileFilter;
import com.ggasoftware.indigo.controls.MolRenderer;
import com.ggasoftware.indigo.controls.MolSaver;
import com.ggasoftware.indigo.controls.MultiLineCellRenderer;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author achurinov
 */
public class InputTable extends javax.swing.JPanel implements java.io.Serializable, MolTable {

   public Indigo indigo;
   public SdfLoader sdf_loader;
   public ArrayList<RenderableMolData> mol_datas = new ArrayList<RenderableMolData>();
   public IndigoEventSource<Integer> progress_event =
           new IndigoEventSource<Integer>(this);
   public IndigoEventSource<Integer> finish_event =
           new IndigoEventSource<Integer>(this);

   private CompareOptions compare_options;

    ///////////////////////////////////////////////////////////////

    private String name;
    private boolean deceased;

    // Конструктор по умолчанию (без аргументов).
    public InputTable() {
    }

    public String getName() {
        return (this.name);
    }
    public void setName(String name) {
        this.name = name;
    }
    // Различные семантики для логического поля (is или get)
    public boolean isDeceased() {
        return (this.deceased);
    }
    public void setDeceased(boolean deceased) {
        this.deceased = deceased;
    }

    /** Creates new form InputTable */
   public void init(Indigo cur_indigo, IndigoRenderer cur_indigo_renderer, 
                    CompareOptions compare_options, MolSaver mol_saver,
                    int cell_w, int cell_h, boolean is_reactions)
   {
      indigo = cur_indigo;

      initComponents();

      this.compare_options = compare_options;

      j_table.getColumn("Id").setCellRenderer(new MultiLineCellRenderer(SwingConstants.CENTER,
              SwingConstants.CENTER));
      j_table.getColumn("Molecules").setCellRenderer(new MolRenderer(indigo, cur_indigo_renderer,
              cell_w, cell_h, is_reactions));

      setBorder(javax.swing.BorderFactory.createTitledBorder(name));
      
      j_table.getColumn("Molecules").setPreferredWidth(cell_w);
      j_table.getColumn("Id").setPreferredWidth(30);
      j_table.addMouseListener(new MolClicker(cur_indigo, cur_indigo_renderer, mol_saver));
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      load_button_panel = new javax.swing.JPanel();
      load_progress_bar = new javax.swing.JProgressBar();
      load_button = new javax.swing.JButton();
      scroll_panel = new javax.swing.JScrollPane();
      j_table = new javax.swing.JTable();

      setBorder(javax.swing.BorderFactory.createTitledBorder("First File"));

      load_button.setText("Load file");
      load_button.setMaximumSize(null);
      load_button.setMinimumSize(null);
      load_button.setPreferredSize(null);
      load_button.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            load_buttonActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout load_button_panelLayout = new javax.swing.GroupLayout(load_button_panel);
      load_button_panel.setLayout(load_button_panelLayout);
      load_button_panelLayout.setHorizontalGroup(
         load_button_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, load_button_panelLayout.createSequentialGroup()
            .addComponent(load_progress_bar, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(load_button, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
      );
      load_button_panelLayout.setVerticalGroup(
         load_button_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(load_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
         .addComponent(load_progress_bar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
      );

      j_table.setModel(new MolTableModel(1));
      j_table.setFocusTraversalPolicyProvider(true);
      j_table.setRowHeight(160);
      scroll_panel.setViewportView(j_table);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(load_button_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .addComponent(scroll_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(load_button_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(scroll_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
      );

      getAccessibleContext().setAccessibleName("First file");
   }// </editor-fold>//GEN-END:initComponents

    private void load_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_buttonActionPerformed
       load_progress_bar.setEnabled(false);

       JFileChooser file_chooser = new JFileChooser();
       MolFileFilter mon_ff = new MolFileFilter();
       mon_ff.addExtension("sdf");
       mon_ff.addExtension("sd");
       mon_ff.addExtension("smi");
       mon_ff.addExtension("cml");
       file_chooser.setFileFilter(mon_ff);
       file_chooser.setCurrentDirectory(new File(GlobalParams.getInstance().dir_path));
       int ret_val = file_chooser.showOpenDialog(this);
       File choosed_file = file_chooser.getSelectedFile();

       if ((choosed_file == null) || (ret_val != JFileChooser.APPROVE_OPTION))
          return;

       GlobalParams.getInstance().dir_path = choosed_file.getParent();

       if (sdf_loader != null)
          sdf_loader.interrupt();

       load_progress_bar.setMinimum(0);
       load_progress_bar.setMaximum((int) choosed_file.length());


       progress_event.addListener(new IndigoEventListener<Integer>() {
            public void handleEvent(Object source, Integer progress) {
               load_progress_bar.setValue(progress);
            }
         });

       finish_event.addListener(new IndigoEventListener<Integer>() {
            public void handleEvent(Object source, Integer event) {
               setMols(sdf_loader.mol_datas, null, null);
               load_button.setEnabled(true);
            }
         });

       String path = openSdf(choosed_file);

       if (path != null)
       {
          load_progress_bar.setString(path);
          load_progress_bar.setStringPainted(true);
       }
}//GEN-LAST:event_load_buttonActionPerformed

   public void clear() {
      this.mol_datas.clear();
      
      setBorder(javax.swing.BorderFactory.createTitledBorder(name));

      DefaultTableModel model = (DefaultTableModel)j_table.getModel();
      while (model.getRowCount() != 0)
         model.removeRow(0);
   }

   public void setMols(ArrayList<? extends MolData> mol_datas,
              ArrayList< ArrayList<Integer> > indexes1,
              ArrayList< ArrayList<Integer> > indexes2) {
      this.mol_datas.clear();
      this.mol_datas.addAll((ArrayList<RenderableMolData>)mol_datas);

      setBorder(javax.swing.BorderFactory.createTitledBorder(name + " - " +
                                              mol_datas.size() + " Molecules"));

      MolTableModel model = (MolTableModel)j_table.getModel();
      model.setMols(mol_datas, indexes1, indexes2);
   }

   public SdfLoader getSdfLoader()
   {
      return sdf_loader;
   }

   public String openSdf(File choosed_file)
   {
      try {
         sdf_loader = new SdfLoader(indigo, null);

         sdf_loader.finish_event.addListener(new IndigoEventListener<Integer>() {
            public void handleEvent(Object source, Integer event) {
               finish_event.fireEvent(event);
            }
         });

         sdf_loader.progress_event.addListener(new IndigoEventListener<Integer>() {
            public void handleEvent(Object source, Integer progress) {
               progress_event.fireEvent(progress);
            }
         });

         if (compare_options.getStereocentersIgnoreFlag())
            indigo.setOption("ignore-stereochemistry-errors", "1");
         else
            indigo.setOption("ignore-stereochemistry-errors", "0");

         String file_name = choosed_file.getPath().toLowerCase();
         if (file_name.endsWith(".smi")) {
            sdf_loader.setExtension("smi");
         } else if (file_name.endsWith(".sdf") || file_name.endsWith(".sd")) {
            sdf_loader.setExtension("sdf");
         } else if (file_name.endsWith(".cml")) {
            sdf_loader.setExtension("cml");
         } else {
            throw new Exception("Unsupported file extension");
         }

         sdf_loader.setFile(choosed_file);
         sdf_loader.start();

         return choosed_file.getPath();
      } catch (Exception ex) {
         JOptionPane msg_box = new JOptionPane();
         msg_box.showMessageDialog((JFrame) (j_table.getTopLevelAncestor()), ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

         System.err.println(">>>>" + ex.getMessage());
         ex.printStackTrace();

         return null;
      }
   }

   public ArrayList<RenderableMolData> getMols() {
      return mol_datas;
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTable j_table;
   private javax.swing.JButton load_button;
   private javax.swing.JPanel load_button_panel;
   private javax.swing.JProgressBar load_progress_bar;
   private javax.swing.JScrollPane scroll_panel;
   // End of variables declaration//GEN-END:variables
}
